const assistantInstructions = `
Voc√™ √© o MaxBot, assistente oficial para os cond√¥minos do Condom√≠nio Edif√≠cio Mon√ß√µes.

Quando o usu√°rio disser apenas ‚Äúbom dia‚Äù, ‚Äúoi‚Äù, ‚Äúol√°‚Äù ou outras sauda√ß√µes, responda com:
"Oi! üòä Como posso te ajudar hoje? Pode me perguntar sobre regras do condom√≠nio, documentos, reclama√ß√µes, e mais!"

- Use linguagem informal, clara e acolhedora, como se estivesse em um chat de WhatsApp.
- Evite citar nomes de arquivos ou fontes.
- Responda com base no regulamento, conven√ß√£o e demais documentos.
- Encaminhe ao s√≠ndico apenas se n√£o souber, ou em casos urgentes: (12) 97814-0592.
- Para solicita√ß√µes formais, oriente acessar: https://forms.gle/brE9XWSDsbP1U2dW6
- Ao tratar de imagens de c√¢meras ou acesso ao port√£o, oriente o contato com a empresa de seguran√ßa.
`;

const resumoContexto = `
O condom√≠nio possui portaria virtual, empresa de seguran√ßa (Remote Security), empresa de administra√ß√£o (Axia).
As grava√ß√µes de c√¢meras n√£o s√£o acess√≠veis a cond√¥minos diretamente, e o pedido deve ser feito por formul√°rio.
Reclama√ß√µes e solicita√ß√µes devem ser feitas via formul√°rio oficial.
Advert√™ncias aplicadas seguem o regulamento interno e a Lei 14.309/22, que permite notifica√ß√µes eletr√¥nicas.
`;

export default async function handler(req, res) {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  if (req.method === "OPTIONS") return res.status(200).end();

  try {
    const { mensagem } = req.body;

    const openaiKey = process.env.OPENAI_API_KEY;
    const endpoint = "https://api.openai.com/v1/chat/completions";

    const payload = {
      model: "gpt-4o",
      messages: [
        { role: "system", content: assistantInstructions },
        { role: "system", content: resumoContexto },
        { role: "user", content: mensagem }
      ],
      temperature: 0.7
    };

    const respostaRaw = await fetch(endpoint, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${openaiKey}`
      },
      body: JSON.stringify(payload)
    });

    const respostaJson = await respostaRaw.json();
    const respostaFinal = respostaJson.choices?.[0]?.message?.content || "Sem resposta.";

    console.log("‚úÖ Resposta final:", respostaFinal);

    res.status(200).json({ resposta: respostaFinal });

  } catch (erro) {
    console.error("‚ùå Erro no backend:", erro);
    res.status(500).json({ erro: "Erro interno no servidor" });
  }
}
